
import { useState } from "react";
import { Lightbulb, BookOpen, BookmarkCheck, Clock } from "lucide-react";
import { DashboardCard } from "./DashboardCard";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface StudyTip {
  id: string;
  type: "suggestion" | "reminder" | "technique" | "resource";
  content: string;
  source?: string;
  difficulty: "beginner" | "intermediate" | "advanced";
  timeRequired: string;
  subjectArea: string;
}

interface StudyAssistantProps {
  studentName?: string;
  className?: string;
  currentGPA?: number;
  weakSubjects?: string[];
}

const generateStudyTips = (weakSubjects: string[], gpa: number): StudyTip[] => {
  // This would ideally be generated by an AI model, but we'll use templates for now
  const allTips: StudyTip[] = [
    {
      id: "1",
      type: "technique",
      content: "Try the Pomodoro Technique: 25 minutes of focused study followed by a 5-minute break.",
      difficulty: "beginner",
      timeRequired: "Ongoing",
      subjectArea: "General"
    },
    {
      id: "2",
      type: "suggestion",
      content: `Based on your performance, consider joining a ${weakSubjects[0] || "study"} study group to collaborate with peers.`,
      difficulty: "intermediate",
      timeRequired: "2-3 hours weekly",
      subjectArea: weakSubjects[0] || "General"
    },
    {
      id: "3",
      type: "resource",
      content: `Check out Khan Academy's free tutorials on ${weakSubjects[1] || "challenging subjects"} for additional practice.`,
      source: "Khan Academy",
      difficulty: "intermediate",
      timeRequired: "Self-paced",
      subjectArea: weakSubjects[1] || "Mathematics"
    },
    {
      id: "4",
      type: "reminder",
      content: gpa < 3.5 
        ? "Creating detailed study notes can improve retention by up to 70%." 
        : "Keep up your excellent study habits! Try teaching concepts to others to reinforce your understanding.",
      difficulty: gpa < 3.5 ? "intermediate" : "advanced",
      timeRequired: "Ongoing",
      subjectArea: "General"
    },
    // Additional new study tips
    {
      id: "5",
      type: "technique",
      content: "Use spaced repetition to review material at increasing intervals to improve long-term retention.",
      difficulty: "intermediate",
      timeRequired: "15-20 minutes daily",
      subjectArea: "General"
    },
    {
      id: "6",
      type: "resource",
      content: "Try using the Anki flashcard app to implement spaced repetition for difficult concepts.",
      source: "Anki",
      difficulty: "intermediate",
      timeRequired: "10-15 minutes daily",
      subjectArea: "Memorization"
    },
    {
      id: "7",
      type: "suggestion",
      content: "Create mind maps to visualize connections between concepts in your coursework.",
      difficulty: "beginner",
      timeRequired: "30-60 minutes per topic",
      subjectArea: "Conceptual Learning"
    },
    {
      id: "8",
      type: "technique",
      content: "Try the 'Feynman Technique': Explain concepts in simple language to identify gaps in your understanding.",
      difficulty: "advanced",
      timeRequired: "Varies by topic",
      subjectArea: "Deep Learning"
    },
    {
      id: "9",
      type: "reminder",
      content: "Research shows studying in 50-minute blocks with 10-minute breaks optimizes focus and retention.",
      difficulty: "beginner",
      timeRequired: "Ongoing",
      subjectArea: "Productivity"
    },
    {
      id: "10",
      type: "resource",
      content: `MIT OpenCourseWare offers free materials for ${weakSubjects[0] || "many subjects"} that can supplement your studies.`,
      source: "MIT OpenCourseWare",
      difficulty: "advanced",
      timeRequired: "Self-paced",
      subjectArea: weakSubjects[0] || "General"
    }
  ];
  
  // Randomly select 4-6 tips from the pool
  const shuffled = [...allTips].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, Math.floor(Math.random() * 3) + 4);
};

export function StudyAssistant({ 
  studentName = "Student", 
  className, 
  currentGPA = 3.2,
  weakSubjects = ["Mathematics", "Physics"] 
}: StudyAssistantProps) {
  const [expanded, setExpanded] = useState(false);
  const [regenerating, setRegenerating] = useState(false);
  const [studyTips, setStudyTips] = useState<StudyTip[]>(
    generateStudyTips(weakSubjects, currentGPA)
  );

  const getTypeIcon = (type: StudyTip["type"]) => {
    switch (type) {
      case "suggestion":
        return <Lightbulb className="h-4 w-4 text-yellow-500" />;
      case "reminder":
        return <Clock className="h-4 w-4 text-blue-500" />;
      case "technique":
        return <BookmarkCheck className="h-4 w-4 text-green-500" />;
      case "resource":
        return <BookOpen className="h-4 w-4 text-purple-500" />;
    }
  };

  const handleRegenerate = () => {
    setRegenerating(true);
    // Simulate an API call to get new study tips
    setTimeout(() => {
      const newTips = generateStudyTips(
        [...weakSubjects].sort(() => Math.random() - 0.5), 
        currentGPA
      );
      setStudyTips(newTips);
      setRegenerating(false);
    }, 1500);
  };

  return (
    <DashboardCard
      title="AI Study Assistant"
      description="Personalized learning insights based on your performance"
      className={className}
    >
      <div className="mb-4 flex items-center gap-3">
        <Avatar className="h-10 w-10 border-2 border-edu-purple/20">
          <AvatarImage src="/ai-assistant.png" alt="AI Assistant" />
          <AvatarFallback className="bg-edu-purple text-white">AI</AvatarFallback>
        </Avatar>
        <div>
          <p className="text-sm font-medium">ScholarSpark AI</p>
          <p className="text-xs text-muted-foreground">Personalized for {studentName}</p>
        </div>
      </div>

      <div className="space-y-4">
        {studyTips.slice(0, expanded ? studyTips.length : 2).map((tip) => (
          <div
            key={tip.id}
            className="rounded-lg border bg-card p-3 shadow-sm transition-all hover:shadow-md"
          >
            <div className="mb-2 flex items-center justify-between">
              <div className="flex items-center gap-2">
                {getTypeIcon(tip.type)}
                <span className="text-xs font-medium capitalize">
                  {tip.type}
                </span>
              </div>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="rounded bg-muted px-2 py-0.5 text-xs font-medium">
                      {tip.subjectArea}
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Subject area</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            <p className="text-sm">{tip.content}</p>
            <div className="mt-2 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-xs text-muted-foreground">
                  {tip.timeRequired}
                </span>
              </div>
              <span
                className={`rounded-full px-2 py-0.5 text-xs font-medium ${
                  tip.difficulty === "beginner"
                    ? "bg-green-100 text-green-800"
                    : tip.difficulty === "intermediate"
                    ? "bg-yellow-100 text-yellow-800"
                    : "bg-red-100 text-red-800"
                }`}
              >
                {tip.difficulty}
              </span>
            </div>
            {tip.source && (
              <div className="mt-2 text-xs text-muted-foreground">
                Source: {tip.source}
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="mt-4 flex justify-between">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setExpanded(!expanded)}
        >
          {expanded ? "Show Less" : "Show More"}
        </Button>
        <Button
          variant="default"
          size="sm"
          className="bg-edu-purple hover:bg-edu-purple/90"
          onClick={handleRegenerate}
          disabled={regenerating}
        >
          {regenerating ? "Thinking..." : "New Tips"}
        </Button>
      </div>
    </DashboardCard>
  );
}
